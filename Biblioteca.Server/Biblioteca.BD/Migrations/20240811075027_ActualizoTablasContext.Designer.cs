// <auto-generated />
using System;
using Biblioteca.BD.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Biblioteca.BD.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240811075027_ActualizoTablasContext")]
    partial class ActualizoTablasContext
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Biblioteca.BD.Data.Entity.Autor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LibrosId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LibrosId");

                    b.ToTable("Autores");
                });

            modelBuilder.Entity("Biblioteca.BD.Data.Entity.Biblio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Domicilio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdLocalidad")
                        .HasColumnType("int");

                    b.Property<int?>("LocalidadesId")
                        .HasColumnType("int");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocalidadesId");

                    b.ToTable("Biblioteca");
                });

            modelBuilder.Entity("Biblioteca.BD.Data.Entity.Columnas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("columnaNumero")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Columnas");
                });

            modelBuilder.Entity("Biblioteca.BD.Data.Entity.Editorial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Domicilio_Editorial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LibroId")
                        .HasColumnType("int");

                    b.Property<int>("LocalidadId")
                        .HasColumnType("int");

                    b.Property<string>("Mail_Editorial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreEditorial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Telefono_Editorial")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LibroId");

                    b.ToTable("Editorial");
                });

            modelBuilder.Entity("Biblioteca.BD.Data.Entity.Estanteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Estanterias");
                });

            modelBuilder.Entity("Biblioteca.BD.Data.Entity.Filas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FilaNumero")
                        .HasColumnType("int");

                    b.Property<int?>("UbicacionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UbicacionId");

                    b.ToTable("Filas");
                });

            modelBuilder.Entity("Biblioteca.BD.Data.Entity.Genero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GeneroNombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Generos");
                });

            modelBuilder.Entity("Biblioteca.BD.Data.Entity.Libros", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnioPublicacion")
                        .HasColumnType("int");

                    b.Property<int>("IdAutor")
                        .HasColumnType("int");

                    b.Property<int>("IdBiblioteca")
                        .HasColumnType("int");

                    b.Property<int>("IdEditorial")
                        .HasColumnType("int");

                    b.Property<int>("IdGenero")
                        .HasColumnType("int");

                    b.Property<int>("IdUbicacion")
                        .HasColumnType("int");

                    b.Property<int?>("LibroId")
                        .HasColumnType("int");

                    b.Property<int>("Paginas")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UbicacionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LibroId");

                    b.HasIndex("UbicacionId");

                    b.ToTable("Libros");
                });

            modelBuilder.Entity("Biblioteca.BD.Data.Entity.Localidades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Localidad_CP")
                        .HasColumnType("int");

                    b.Property<string>("NombreLocalidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinciaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Localidades");
                });

            modelBuilder.Entity("Biblioteca.BD.Data.Entity.Provincias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LocalidadesId")
                        .HasColumnType("int");

                    b.Property<string>("ProvinciaNombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocalidadesId");

                    b.ToTable("Provincias");
                });

            modelBuilder.Entity("Biblioteca.BD.Data.Entity.Ubicacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ColumnasId")
                        .HasColumnType("int");

                    b.Property<int?>("EstanteriaId")
                        .HasColumnType("int");

                    b.Property<int>("IdEstanteria")
                        .HasColumnType("int");

                    b.Property<string>("UbicacionNombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnasId");

                    b.HasIndex("EstanteriaId");

                    b.ToTable("Ubicacion");
                });

            modelBuilder.Entity("Biblioteca.BD.Data.Entity.Autor", b =>
                {
                    b.HasOne("Biblioteca.BD.Data.Entity.Libros", "Libros")
                        .WithMany()
                        .HasForeignKey("LibrosId");

                    b.Navigation("Libros");
                });

            modelBuilder.Entity("Biblioteca.BD.Data.Entity.Biblio", b =>
                {
                    b.HasOne("Biblioteca.BD.Data.Entity.Localidades", "Localidades")
                        .WithMany()
                        .HasForeignKey("LocalidadesId");

                    b.Navigation("Localidades");
                });

            modelBuilder.Entity("Biblioteca.BD.Data.Entity.Editorial", b =>
                {
                    b.HasOne("Biblioteca.BD.Data.Entity.Libros", "Libro")
                        .WithMany()
                        .HasForeignKey("LibroId");

                    b.Navigation("Libro");
                });

            modelBuilder.Entity("Biblioteca.BD.Data.Entity.Filas", b =>
                {
                    b.HasOne("Biblioteca.BD.Data.Entity.Ubicacion", "Ubicacion")
                        .WithMany()
                        .HasForeignKey("UbicacionId");

                    b.Navigation("Ubicacion");
                });

            modelBuilder.Entity("Biblioteca.BD.Data.Entity.Libros", b =>
                {
                    b.HasOne("Biblioteca.BD.Data.Entity.Libros", "Libro")
                        .WithMany()
                        .HasForeignKey("LibroId");

                    b.HasOne("Biblioteca.BD.Data.Entity.Ubicacion", "Ubicacion")
                        .WithMany()
                        .HasForeignKey("UbicacionId");

                    b.Navigation("Libro");

                    b.Navigation("Ubicacion");
                });

            modelBuilder.Entity("Biblioteca.BD.Data.Entity.Provincias", b =>
                {
                    b.HasOne("Biblioteca.BD.Data.Entity.Localidades", "Localidades")
                        .WithMany()
                        .HasForeignKey("LocalidadesId");

                    b.Navigation("Localidades");
                });

            modelBuilder.Entity("Biblioteca.BD.Data.Entity.Ubicacion", b =>
                {
                    b.HasOne("Biblioteca.BD.Data.Entity.Columnas", "Columnas")
                        .WithMany()
                        .HasForeignKey("ColumnasId");

                    b.HasOne("Biblioteca.BD.Data.Entity.Estanteria", "Estanteria")
                        .WithMany()
                        .HasForeignKey("EstanteriaId");

                    b.Navigation("Columnas");

                    b.Navigation("Estanteria");
                });
#pragma warning restore 612, 618
        }
    }
}
